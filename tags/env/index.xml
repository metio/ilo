<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Env on ilo</title><link>https://ilo.projects.metio.wtf/tags/env/</link><description>Recent content in Env on ilo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 13 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ilo.projects.metio.wtf/tags/env/index.xml" rel="self" type="application/rss+xml"/><item><title>Build Environments</title><link>https://ilo.projects.metio.wtf/usage/build-envs/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://ilo.projects.metio.wtf/usage/build-envs/</guid><description>&lt;p&gt;&lt;code&gt;ilo&lt;/code&gt; allows you to define your build environment either in a &lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Containerfile/Dockerfile&lt;/a&gt; or any other &lt;a href="https://github.com/opencontainers/image-spec/blob/master/spec.md"&gt;OCI Image&lt;/a&gt; compliant way. In contrast to &lt;a href="https://containertoolbx.org/"&gt;toolbx&lt;/a&gt;, &lt;code&gt;ilo&lt;/code&gt; relies on immutable containers which makes it easier to share those images across your team. &lt;code&gt;ilo&lt;/code&gt; uses the same mechanism to define build environments that developers are already using to define their application run environments. Therefore, onboarding and adapting container based build environments should be easy for most teams.&lt;/p&gt;</description></item></channel></rss>