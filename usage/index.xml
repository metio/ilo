<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on ilo</title><link>https://ilo.projects.metio.wtf/usage/</link><description>Recent content in Usage on ilo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 13 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ilo.projects.metio.wtf/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Argument Files</title><link>https://ilo.projects.metio.wtf/usage/argument-files/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://ilo.projects.metio.wtf/usage/argument-files/</guid><description>&lt;p&gt;In order to share the same options/commands across your team, &lt;code&gt;ilo&lt;/code&gt; supports argument files which contain the options for your project, e.g. which image you are using. Argument files are just plain text files and both name and location can be chosen at will. In order to use an argument file, you have to add &lt;strong&gt;@&lt;/strong&gt; in front of the file name: &lt;code&gt;ilo @file-name&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-console" data-lang="console"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;#&lt;/span&gt; write argument file
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat some/folder/your-arguments
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;shell
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;node:latest
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="go"&gt;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; use argument file
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ilo @some/folder/your-arguments
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The argument file in the above example specified all commands and options on a new line, however you could write them all in a single line (or a mixture of both) as well:&lt;/p&gt;</description></item><item><title>Autocomplete</title><link>https://ilo.projects.metio.wtf/usage/autocomplete/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://ilo.projects.metio.wtf/usage/autocomplete/</guid><description>&lt;p&gt;The &lt;code&gt;ilo generate-completion&lt;/code&gt; command generates autocompletion configuration for shells such as &lt;a href="https://www.gnu.org/software/bash/"&gt;bash&lt;/a&gt; and &lt;a href="https://www.zsh.org/"&gt;zsh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once enabled you can use the &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; key to autocomplete ilo commands and their options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-console" data-lang="console"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;#&lt;/span&gt; autocomplete commands
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ilo s&amp;lt;TAB&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ilo shell
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; autocomplete options
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ilo shell --re&amp;lt;TAB&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ilo shell --remove-image
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="bash"&gt;bash&lt;/h2&gt;
&lt;p&gt;In order to integrate autocompletion into &lt;a href="https://www.gnu.org/software/bash/"&gt;bash&lt;/a&gt;, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create or edit &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the following line
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;ilo generate-completion&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Reload your shell (or create a new one)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="zsh"&gt;zsh&lt;/h2&gt;
&lt;p&gt;In order to integrate autocompletion into &lt;a href="https://www.zsh.org/"&gt;zsh&lt;/a&gt;, follow these steps:&lt;/p&gt;</description></item><item><title>Automate</title><link>https://ilo.projects.metio.wtf/usage/autoenv/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://ilo.projects.metio.wtf/usage/autoenv/</guid><description>&lt;p&gt;In order to simplify the usage of &lt;code&gt;ilo&lt;/code&gt;, consider using &lt;code&gt;autoenv&lt;/code&gt;-like tooling. These tools all allow you to just enter a directory and will automatically call &lt;code&gt;ilo&lt;/code&gt; for you like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-console" data-lang="console"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;[you@hostname ~]$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; path/to/your/project
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;[root@container project-dir]#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As soon as you enter the directory of your project, these tools will call &lt;code&gt;ilo&lt;/code&gt; which in turn will open your build environment for you.&lt;/p&gt;
&lt;h2 id="autoenv"&gt;autoenv&lt;/h2&gt;
&lt;p&gt;In order to use &lt;a href="https://github.com/inishchith/autoenv"&gt;autoenv&lt;/a&gt;, first &lt;a href="https://github.com/inishchith/autoenv#install"&gt;install it&lt;/a&gt; and then place a &lt;code&gt;.env&lt;/code&gt; file in the root of your project which contains &lt;code&gt;ilo&lt;/code&gt; and its arguments as its contents.&lt;/p&gt;</description></item><item><title>Build Environments</title><link>https://ilo.projects.metio.wtf/usage/build-envs/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://ilo.projects.metio.wtf/usage/build-envs/</guid><description>&lt;p&gt;&lt;code&gt;ilo&lt;/code&gt; allows you to define your build environment either in a &lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Containerfile/Dockerfile&lt;/a&gt; or any other &lt;a href="https://github.com/opencontainers/image-spec/blob/master/spec.md"&gt;OCI Image&lt;/a&gt; compliant way. In contrast to &lt;a href="https://containertoolbx.org/"&gt;toolbx&lt;/a&gt;, &lt;code&gt;ilo&lt;/code&gt; relies on immutable containers which makes it easier to share those images across your team. &lt;code&gt;ilo&lt;/code&gt; uses the same mechanism to define build environments that developers are already using to define their application run environments. Therefore, onboarding and adapting container based build environments should be easy for most teams.&lt;/p&gt;</description></item><item><title>Install</title><link>https://ilo.projects.metio.wtf/usage/install/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://ilo.projects.metio.wtf/usage/install/</guid><description>&lt;p&gt;Prebuilt binaries of &lt;code&gt;ilo&lt;/code&gt; are available for each published release at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/metio/ilo/releases"&gt;https://github.com/metio/ilo/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download the package for your operating system and put the &lt;code&gt;ilo&lt;/code&gt; binary in your &lt;code&gt;$PATH&lt;/code&gt;. Use the JVM variant in case your operating system is not directly supported.&lt;/p&gt;
&lt;h2 id="huber"&gt;Huber&lt;/h2&gt;
&lt;p&gt;In case you are using &lt;a href="https://github.com/innobead/huber"&gt;huber&lt;/a&gt;, execute the following commands to install &lt;code&gt;ilo&lt;/code&gt; on Linux/Mac/Windows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-console" data-lang="console"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; huber repo add remote-repo --url https://github.com/metio/ilo
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; huber install ilo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item></channel></rss>