= Capture architecture decisions

* Status: accepted
* Deciders: sebhoss
* Date: 2020-04-05

== Context and Problem Statement

Capturing architecture decision would be helpful for a number of things.
Appropriate tooling might be able to reduce maintenance overhead.
Should architecture decisions be captured for the ilo project, and what is appropriate tooling?

== Decision Drivers

* Maintenance overhead
* Versioned in same git repo
* Community engagement

== Considered Options

* Do not capture architecture decisions
* Capture architecture decisions using asciidoc based templates
* Capture architecture decisions using markdown based templates
* Use link:https://github.com/npryce/adr-tools[adr-tools] to capture architecture decisions
* Use link:https://adr.github.io/madr/[madr] to capture architecture decisions

== Decision Outcome

Chosen option: "Capture architecture decisions using asciidoc based templates", because it requires no additional tooling and can be changed very easily.

=== Positive Consequences

* External contributors can see past decisions
* External contributors can propose new decisions
* Transparent pull request based workflow

=== Negative Consequences

* Extra work for maintainers

== Pros and Cons of the Options

=== Do not capture architecture decisions

* Good, because it requires no additional work
* Bad, because makes it harder for externals to contribute

=== Capture architecture decisions using asciidoc based templates

The proposed template can be seen in the link:../templates/ADR.asciidoc[templates directory].

* Good, because it requires no additional tooling
* Good, because it allows use to keep using asciidoc
* Good, because it easily be worked into a static site generator
* Bad, because it get hard to maintain if the number of adrs increase

=== Capture architecture decisions using markdown based templates

* Good, because it requires no additional tooling
* Good, because it easily be worked into a static site generator
* Bad, because we would have to use markdown for some part of the documentation
* Bad, because it get hard to maintain if the number of adrs increase

=== Use adr-tools to capture architecture decisions

* Good, because it simplifies creating new adrs
* Good, because simplifies state management
* Bad, because it is not available on all platforms
* Bad, because we would have to use markdown for some part of the documentation

=== Use madr to capture architecture decisions

* Good, because it requires no additional tooling
* Good, because it easily be worked into a static site generator
* Bad, because we would have to use markdown for some part of the documentation
* Bad, because it get hard to maintain if the number of adrs increase
