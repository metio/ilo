name: Automated Release
on:
  schedule:
    - cron:  45 3 * * MON
jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      commit_count: ${{ steps.commits.outputs.count }}
      release_version: ${{ steps.release.outputs.version }}
      previous_version: ${{ steps.previous.outputs.version }}
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: commits
        name: Count Commits
        run: echo "::set-output name=count::$(git rev-list --count HEAD --since='last Monday' -- src/main/java)"
      - id: release
        name: Create Release Version
        if: steps.commits.outputs.count > 0
        run: echo "::set-output name=version::$(date +'%Y.%-m.%-d')"
      - id: previous
        name: Get Last Release
        if: steps.commits.outputs.count > 0
        run: echo "::set-output name=version::$(git describe --abbrev=0 --tags)"
  build:
    name: Build on ${{ matrix.os }}
    needs: prepare
    outputs:
      mac_sha256: ${{ steps.mac-checksum.outputs.sha256 }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - id: checkout
        name: Clone Git Repository
        if: needs.prepare.outputs.commit_count > 0
        uses: actions/checkout@v3
      - id: graal
        name: GraalVM Setup
        uses: graalvm/setup-graalvm@v1
        with:
          version: 22.1.0
          java-version: 17
          components: native-image
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - id: cache
        name: Cache Maven Repository
        if: needs.prepare.outputs.commit_count > 0
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - id: gpg
        name: GPG Key
        if: needs.prepare.outputs.commit_count > 0
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: signing.key.asc
          fileDir: ${{ github.workspace}}
          encodedString: ${{ secrets.GPG_SECRET_KEY_BASE64 }}
      - id: verify
        if: needs.prepare.outputs.commit_count > 0
        name: Verify Project
        run: mvn --batch-mode verify --activate-profiles release --define revision=${{ needs.prepare.outputs.release_version }} --define skipNativeBuild=false --define pgp.secretkey=keyfile:signing.key.asc --define pgp.passphrase=literal:${{ secrets.GPG_SECRET_KEY_PASSWORD }}
      - id: mac-checksum
        name: Capture MacOS SHA256 Checksum
        if: needs.prepare.outputs.commit_count > 0 && runner.os == 'macOS'
        run: echo "::set-output name=sha256::$(cat ./target/ilo-${{ needs.prepare.outputs.release_version }}-mac.zip.sha256)"
      - id: upload-java
        name: Upload JVM Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jvm
          path: ./target/ilo-*-jvm*
        if: runner.os == 'Linux'
      - id: upload-linux
        name: Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: ./target/ilo-*-linux*
        if: runner.os == 'Linux'
      - id: upload-mac
        name: Upload Mac Artifact
        uses: actions/upload-artifact@v3
        with:
          name: mac
          path: ./target/ilo-*-mac*
        if: runner.os == 'macOS'
      - id: upload-windows
        name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: ./target/ilo-*-windows*
        if: runner.os == 'Windows'
  release:
    name: GitHub Release
    needs: [prepare, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - id: checkout
        name: Clone Git Repository
        if: needs.prepare.outputs.commit_count > 0
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: download
        name: Download Artifacts
        if: needs.prepare.outputs.commit_count > 0
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - id: create_release
        name: Create Release
        if: needs.prepare.outputs.commit_count > 0
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.release_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/jvm/ilo-${{ needs.prepare.outputs.release_version }}-jvm.zip
            artifacts/jvm/ilo-${{ needs.prepare.outputs.release_version }}-jvm.zip.asc
            artifacts/jvm/ilo-${{ needs.prepare.outputs.release_version }}-jvm.zip.sha512
            artifacts/linux/ilo-${{ needs.prepare.outputs.release_version }}-linux.zip
            artifacts/linux/ilo-${{ needs.prepare.outputs.release_version }}-linux.zip.asc
            artifacts/linux/ilo-${{ needs.prepare.outputs.release_version }}-linux.zip.sha512
            artifacts/mac/ilo-${{ needs.prepare.outputs.release_version }}-mac.zip
            artifacts/mac/ilo-${{ needs.prepare.outputs.release_version }}-mac.zip.asc
            artifacts/mac/ilo-${{ needs.prepare.outputs.release_version }}-mac.zip.sha512
            artifacts/windows/ilo-${{ needs.prepare.outputs.release_version }}-windows.zip
            artifacts/windows/ilo-${{ needs.prepare.outputs.release_version }}-windows.zip.asc
            artifacts/windows/ilo-${{ needs.prepare.outputs.release_version }}-windows.zip.sha512
  packages:
    name: Update Package Managers
    needs: [prepare, build, release]
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Clone Git Repository
        if: needs.prepare.outputs.commit_count > 0
        uses: actions/checkout@v3
      - id: update-copr-version
        name: Update COPR Version
        if: needs.prepare.outputs.commit_count > 0
        run: sed -i -- 's/${{ needs.prepare.outputs.previous_version }}/${{ needs.prepare.outputs.release_version }}/g' build/copr/ilo.spec
      - id: update-nixos-version
        name: Update NixOS Flake Version
        if: needs.prepare.outputs.commit_count > 0
        run: sed -i -- 's/${{ needs.prepare.outputs.previous_version }}/${{ needs.prepare.outputs.release_version }}/g' build/nixos/flake.nix
      - id: update-homebrew-version
        name: Update Homebrew Version
        if: needs.prepare.outputs.commit_count > 0
        run: sed -i -- 's/${{ needs.prepare.outputs.previous_version }}/${{ needs.prepare.outputs.release_version }}/g' HomebrewFormula/ilo.rb
      - id: update-homebrew-checksum
        name: Update Homebrew Checksum
        if: needs.prepare.outputs.commit_count > 0
        run: sed -i -- 's/sha256 \".*\"/sha256 \"${{ needs.build.outputs.mac_sha256 }}\"/g' HomebrewFormula/ilo.rb
      - id: changes
        name: Commit Changes
        if: needs.prepare.outputs.commit_count > 0
        uses: EndBug/add-and-commit@v9
        with:
          author_name: ${{ github.actor }}
          author_email: ${{ github.actor }}@users.noreply.github.com
          message: Update package-manager infos for latest release
          add: "['build/copr/ilo.spec', 'build/nixos/flake.nix', 'HomebrewFormula/ilo.rb']"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  announce:
    name: Release Announcement
    needs: [prepare, packages]
    runs-on: ubuntu-latest
    steps:
      - id: email
        name: Send Mail
        if: needs.prepare.outputs.commit_count > 0
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: release ${{ needs.prepare.outputs.release_version }}
          body: See https://github.com/metio/ilo/releases/tag/${{ needs.prepare.outputs.release_version }} for details.
          to: ilo@metio.groups.io
          from: ${{ secrets.MAIL_SENDER }}
      - id: matrix
        name: Send Matrix Message
        if: needs.prepare.outputs.commit_count > 0
        uses: s3krit/matrix-message-action@v0.0.3
        with:
          room_id: ${{ secrets.MATRIX_ROOM_ID }}
          access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          message: release ${{ needs.prepare.outputs.release_version }} published - see https://github.com/metio/ilo/releases/tag/${{ needs.prepare.outputs.release_version }} for details
          server: matrix.org
